
import os
import handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import config
from loader import dp, db, bot
import filters
import logging

filters.setup(dp)

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 5000))
user_message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
admin_message = '–ê–¥–º–∏–Ω'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    #markup.row(user_message, admin_message)

    await message.answer('''–°”ô–ª–µ–º! üëã

ü§ñ –ë“±–ª - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥“Ø–∫–µ–Ω—ñ 
    
üõçÔ∏è –ú”ô–∑—ñ—Ä–≥–µ ”©—Ç—É “Ø—à—ñ–Ω /menu –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.

üí∞ –ë–æ—Ç –∞—Ä“õ—ã–ª—ã —Ç–∞—É–∞—Ä —Å–∞—Ç—ã–ø –∞–ª—É - –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä“õ—ã–ª—ã –∂“Ø–∑–µ–≥–µ –∞—Å–∞–¥—ã. –Ø“ì–Ω–∏ “õ–∞—É—ñ–ø—Å—ñ–∑ —Ç”©–ª–µ–º –∞—Ä“õ—ã–ª—ã –∂“±–º—ã—Å –∂–∞—Å–∞–π–º—ã–∑.

‚ùì –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, –Ω–µ–º–µ—Å–µ –±–æ—Ç —ñ—Å—Ç–µ–º–µ—Å–µ –ö–æ–º–∞–Ω–¥–∞ /sos-—Ç—ã –±–∞—Å—ã–ø –∞–¥–º–∏–Ω“ì–∞ —à—ã“õ—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã! 

ü§ù –¢—É—Ä–∞ –æ—Å—ã–Ω–¥–∞–π –±–æ—Ç –∂–∞—Å–∞—Ç–∞–º—ã–Ω –¥–µ—Å–µ“£—ñ–∑, –±—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑ <a href="https://t.me/arslan_toilybay">Arslan Toilybay</a>)))
    ''', reply_markup=markup)

    print(message.chat.id)
    db.query('INSERT INTO clients VALUES (' + str(message.chat.id) + ')')


@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):

    cid = message.chat.id
    if cid in config.ADMINS:
        config.ADMINS.remove(cid)

    await message.answer('–í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):

    cid = message.chat.id
    if cid not in config.ADMINS:
        config.ADMINS.append(cid)

    await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())


async def on_startup(dp):
    logging.basicConfig(level=logging.INFO)
    db.create_tables()

    await bot.delete_webhook()
    await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown():
    logging.warning("Shutting down..")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


if __name__ == '__main__':

    if "HEROKU" in list(os.environ.keys()):

        executor.start_webhook(
            dispatcher=dp,
            webhook_path=config.WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT,
        )

    else:

        executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
